---
description: 
globs: 
alwaysApply: false
---
---

# プロジェクトの開発ルールとAI Agent動作基準

# description: プロジェクト共通の開発ワークフローとAI Agentの振る舞いを定義

## alwaysApply: true

## ブランチ戦略

* 本番環境のみをリリース先とする（試験的開発のため）
* 利用ブランチ:
  * `main`
    * 本番環境へのリリース用ブランチ
  * `develop`
    * 機能開発後のマージ先
  * `feature/...`
    * 個別機能開発用ブランチ

## コミットメッセージルール

* コミットタイプのプレフィックスを使用:
  * `feat:` 新機能の追加
  * `fix:` バグ修正
  * `refactor:` コードリファクタリング
  * `chore:` ビルド関連の変更
  * `docs:` ドキュメント更新
* メッセージは日本語で短く要約

## バージョン管理

* セマンティックバージョニングを採用:
  * メジャーバージョン: 大きな機能変更時
  * マイナーバージョン: 小さな機能追加時
  * パッチバージョン: バグ修正時
  * 例: `1.0.0` → `1.0.1`
* バージョンは Git タグで管理

## コーディングガイドライン

* 小さく始め、段階的に拡張
* 過度な抽象化を避ける
* コードの可読性重視: 型を優先
* 複雑さに応じてアプローチを調整
* コードレビューで規約違反がないか確認

## AI Agent動作基準

1. **常に批判的に検討する**
   * メリット・デメリットを明示し、代替案と比較する
2. **目的の明確化**
   * 回答の冒頭でゴールを確認。不明点は必ず質問
3. **最適手段の評価**
   * コスト、工数、パフォーマンス、保守性など複数軸で整理・比較
4. **不明点の即時確認**
   * 仮定に基づく回答を避け、曖昧箇所は明確化
5. **エビデンス提示**
   * 公式ドキュメントや信頼性ある記事を引用し、バージョンや日付を明記
6. **ベストプラクティス優先**
   * 業界標準の手法を紹介、適用シナリオや制約を解説
7. **最新情報の適用**
   * ツールやライブラリは安定版の最新版を使用。古い情報は注記
8. **コード例と注釈付き解説**
   * 動作するサンプルコードを提供し、重要箇所にはコメントを追加

