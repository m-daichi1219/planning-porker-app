---
description: TypeScript Rules
globs: **/*.ts
alwaysApply: false
---
## TypeScript

TypeScriptでのコーディングにおける一般的なベストプラクティスとコーディング規約を定義する。
コードの一貫性、可読性、保守性を高めることを目的とする。

### 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様かを可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する
- 常にコードの読みやすさ、テスト容易性、保守性を最優先にする
- 既存のコードベースのスタイルや設計パターンを尊重する
- 判断に迷う場合や複数の設計選択肢がある場合は、それぞれのメリット・デメリットを明記し、提案する


### 実装の選択基準

1. 関数を選ぶ場合
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少ない
   - テストが容易

2. classを選ぶ場合
   - 内部状態の管理が必要
   - 設定やリソースの保持が必要
   - メソッド間で状態を共有
   - ライフサイクル管理が必要

3. Adapterを選ぶ場合
   - 外部依存の抽象化
   - テスト時のモック化が必要
   - 実装の詳細を隠蔽したい
   - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
   - 外部依存はコンストラクタで注入
   - テスト時にモックに置き換え可能に
   - グローバルな状態を避ける

2. インターフェースの設計
   - 必要最小限のメソッドを定義
   - 実装の詳細を含めない
   - プラットフォーム固有の型を避ける

3. テスト容易性
   - モックの実装を簡潔に
   - エッジケースのテストを含める
   - テストヘルパーを適切に分離

4. コードの分割
   - 単一責任の原則に従う
   - 適切な粒度でモジュール化
   - 循環参照を禁止する

5. エラーハンドリング
   - エラー発生時には、原因究明に必要な十分な情報（スタックトレース、コンテキスト情報など）をログに出力する

6. リソース管理
   - ファイルハンドル、ネットワーク接続、タイマーなど、明示的な解放が必要なリソースは、`try...finally` ブロックや `using` 宣言 (TypeScript 5.2+) を使用して、エラー発生時でも確実に解放されるようにする

7. パフォーマンス
   - 大量のデータを扱うループ処理や、頻繁に呼び出される関数では、不必要な処理やメモリ確保が行われていないか意識してください。
   - アルゴリズムの計算量に注意してください。
   - ただし、早すぎる最適化は避け、まずは可読性と正確性を優先してください。パフォーマンスが問題になる場合に計測・改善を行ってください。

8. 非推奨事項
   - グローバル変数の定義と安易な使用
   - `eval` や `new Function(string)` の使用
   - 型アサーション (`as Type` や `<Type>value`) の乱用 (可能な限り型ガードを使用してください)
   - 既存の型定義を破壊するようなモンキーパッチ

### 命名規則

1. 名前が説明的である（名前から意図が読み取れる）こと
  - 意味のある言葉を利用して、一般的な用語以外は省略しない
  - good: `dnsAdapter, userCount, fetchItemById`
  - bad: `dAdp, uCnt, getItem`

2. 関数(function / parameter)、変数は`lowerCamelCase`を用いる
  - good: `dnsAdapter, userCount, fetchItemById`
  - bad: `dAdp, uCnt, getItem`

3. 型(type/interface)、クラス名は`UpperCamelCase`を用いる
  - good: `FizAdapter, BazService, FooController`
  - bad: `fizAdapter, bazservice, FOOController`

4. 定数は`Enum`を含めて`UPPER_SNAKE_CASE`を用いる
  - good: `API_BASE_URL`
  - bad: `apiBaseUrl`

### 型の使用方針

1. 具体的な型を使用
   - any の使用を避ける
   - いかなる状況でも `any` の利用は禁止されています
      - 代替手段（`unknown`、ジェネリクス、具体的な型定義）を常に検討してください
   - 型推論が可能な場合でも、関数のシグネチャ（引数と戻り値）、公開される API、複雑なデータ構造については型を明示的に記述する
   - unknown を使用してから型を絞り込む
   - Utility Types を活用する

2. 型エイリアスの命名
   - 意味のある名前をつける
   - 型の意図を明確にする
   ```ts
   // Good
   type UserId = string;
   type UserData = {
     id: UserId;
     createdAt: Date;
   };

   // Bad
   type Data = any;
   ```

### 実装パターン

1. 関数ベース（状態を持たない場合）
   ```ts
   // インターフェース
   interface Logger {
     log(message: string): void;
   }

   // 実装
   function createLogger(): Logger {
     return {
       log(message: string): void {
         console.log(`[${new Date().toISOString()}] ${message}`);
       },
     };
   }
   ```

2. classベース（状態を持つ場合）
   ```ts
   interface Cache<T> {
     get(key: string): T | undefined;
     set(key: string, value: T): void;
   }

   class TimeBasedCache<T> implements Cache<T> {
     private items = new Map<string, { value: T; expireAt: number }>();

     constructor(private ttlMs: number) {}

     get(key: string): T | undefined {
       const item = this.items.get(key);
       if (!item || Date.now() > item.expireAt) {
         return undefined;
       }
       return item.value;
     }

     set(key: string, value: T): void {
       this.items.set(key, {
         value,
         expireAt: Date.now() + this.ttlMs,
       });
     }
   }
   ```

3. Adapterパターン（外部依存の抽象化）
   ```ts
   // 抽象化
   type Fetcher = <T>(path: string) => Promise<Result<T, ApiError>>;

   // 実装
   function createFetcher(headers: Record<string, string>): Fetcher {
     return async <T>(path: string) => {
       try {
         const response = await fetch(path, { headers });
         if (!response.ok) {
           return err({
             type: "network",
             message: `HTTP error: ${response.status}`,
           });
         }
         return ok(await response.json());
       } catch (error) {
         return err({
           type: "network",
           message: error instanceof Error ? error.message : "Unknown error",
         });
       }
     };
   }

   // 利用
   class ApiClient {
     constructor(
       private readonly getData: Fetcher,
       private readonly baseUrl: string,
     ) {}

     async getUser(id: string): Promise<Result<User, ApiError>> {
       return await this.getData(`${this.baseUrl}/users/${id}`);
     }
   }
   ```
